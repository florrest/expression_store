:mod:`database_preprocessor`
============================

.. py:module:: database_preprocessor


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   database_preprocessor.Log
   database_preprocessor.Helper
   database_preprocessor.Downloader
   database_preprocessor.DataProcessor
   database_preprocessor.ListDict
   database_preprocessor.SQLscripts



Functions
~~~~~~~~~

.. autoapisummary::

   database_preprocessor.main


.. data:: parser
   

   

.. function:: main()

   This is the main class, which performs all necessary steps to successfully download, process and export metadata
   and data for the database

   :param rnaseq: Path to the base directory of nf-core/rnaseq
   :param sra_file: Path to the SRA accession list txt-file
   :param dcc_manifest: Path to the manifest file of ICGC DCC
   :param gdc_manifest: Path to the manifest file of GDC
   :param metadata_dest: Path to a previously created directory, to store downloaded metadata
   :param db_dest: Path to the destination directory of the created csv-files, which are imported to the database
   :return: None


.. py:class:: Log

   .. attribute:: logger
      

      

   .. attribute:: ch
      

      

   .. attribute:: formatter
      

      


.. py:class:: Helper

   .. method:: gunzip_files(directory)
      :staticmethod:

      This method unzips all .gz files in a given directory, and deletes the .gz files afterwards.
      :param directory: Path to directory, which contains files to be unzipped
      :return: None


   .. method:: retrieve_data(url, destination, retry_count=0)
      :staticmethod:

      This method downloads files from a remote source and saves them in the destination directory.
      :param url: URL to file, which has to be downloaded
      :param destination: Path to directory, where the files should be saved
      :param retry_count: When retry_count is 0, stop script
      :return:


   .. method:: extract_icgc_run_id(string)
      :staticmethod:

      This method splits a specific string, created by ICGC.The split truncates the Read suffix.
      :param string: Any given string, which might needs be truncated.
      :return: splitted String


   .. method:: extract_sample_id(string)
      :staticmethod:

      This method splits sample_id strings, and truncates the substrings generated by StringTie
      :param string: Any given string, which might needs be truncated.
      :return: splitted String


   .. method:: create_csv(df, file_name, db_dest)
      :staticmethod:

      This method exports a DataFrame to a csv-File with no Index
      :param df: DataFrame to be exported
      :param file_name: File name for the exported csv-file
      :param db_dest: Destination Directory, where csv should be saved
      :return: None


   .. method:: create_csv_from_dask(ddf, file_name, db_dest)
      :staticmethod:

      This method exports a DASK DataFrame to a csv-File with no Index
      :param ddf: dask DataFrame
      :param file_name: File name for the exported csv-file
      :param db_dest: Destination Directory, where csv should be saved
      :return:


   .. method:: get_icgc_project_list(path_to_dcc_manifest)
      :staticmethod:

      This method creates a unique list of ICGC DCC projects, for which metadata has to be downloaded
      :param path_to_dcc_manifest: Path to ICGC DCC manifest file
      :return: list of unique ICGC DCC project codes


   .. method:: get_sra_accession_list(path_to_sra_acc_list)
      :staticmethod:

      This method creates a unique list of SRA accessions, for which metadata has to be downloaded
      :param path_to_sra_acc_list: path to SRA Accession List
      :return: list of unique SRA accesssions


   .. method:: get_gdc_filename_list(path_to_gdc_manifest)
      :staticmethod:

      This method creates a list of GDC files, for which metadata has to be downloaded
      :param path_to_gdc_manifest: path to GDC manifest file
      :return: returns a unique list of GDC file_names



.. py:class:: Downloader

   .. method:: download_sra_metadata(sra_acc_lst, metadata_dest)
      :staticmethod:

      This method downloads runInfo.csv from SRA depending on a list of SRA accessions
      :param sra_acc_lst: List containing unique SRA Run accession
      :param metadata_dest: Path to directory, where metadata should be downloaded to
      :return:


   .. method:: download_icgc_project_metadata(icgc_project_lst, metadata_dest)
      :staticmethod:

      This method downloads all necessary metadata from ICGC DCC
      :param icgc_project_lst: Unique List of Project Codes from ICGC DCC
      :param metadata_dest: Path to directory, where metadata should be downloaded tod
      :return:


   .. method:: download_gdc_file_metadata(gdc_file_name_list, metadata_dest)
      :staticmethod:

      This method downloads all required Metadata from GDC
      :param gdc_file_name_list: Unique list of GDC file names
      :param metadata_dest: Path to directory, where metadata should be downloaded to
      :return:


   .. method:: download_ensembl_metadata(metadata_dest)
      :staticmethod:

      This method downloads data from Ensembl!
      :param metadata_dest: Path to directory, where metadata has been downloaded to
      :return:


   .. method:: download_hgnc(metadata_dest)
      :staticmethod:

      This method downloads metadata from HGNC
      :param metadata_dest: Path to directory, where metadata should be saved
      :return: DataFrame containing information from HGNC



.. py:class:: DataProcessor

   .. method:: process_hgnc_metadata(metadata_dest)
      :staticmethod:

      This method processes the metadata from HGNC
      :param metadata_dest: Path to directory, where metadata has been downloaded to
      :return: DataFrame containing information about HGNC


   .. method:: process_ensembl_metadata(metadata_dest)
      :staticmethod:

      This method processes ensembl metadata from the processed gtf file
      :param metadata_dest: Path to directory, where metadata has been downloaded to
      :return: DataFrame containing information about Ensembl


   .. method:: concat_sra_meta(inpath_sra_meta_csv, used_accessions)
      :staticmethod:

      This method concatenates all downloaded metadata files from SRA, if they are in scope of the SRA files,
      which have been processed with nf-core/rnaseq
      :param inpath_sra_meta_csv: Path to directory, where the SRA metadata has been saved
      :param used_accessions: SRA accessions, which have been used for analysis with rnaseq
      :return: DataFrame containing all processed metadata from SRA


   .. method:: concat_gdc_meta(inpath_gdc_meta)
      :staticmethod:

      This method concatenates metadata, downloaded from GDC
      :param inpath_gdc_meta: Path to directory, where GDC metadata has been saved
      :return: DataFrame containing information about GDC metadata


   .. method:: concat_icgc_meta(metadata_dest, path_to_dcc_manifest)
      :staticmethod:

      This method joins metadata from ICGC DCC (Donor, Sample, Project, Repository)
      based on their matching columns
      :param metadata_dest: Path to directory, where metadata has been downloaded to
      :param path_to_dcc_manifest: Path to ICGC DCC manifest file
      :return: returns DataFrames merged repository and manifest, sample, donor


   .. method:: stringtie_results_out(res_inpath)
      :staticmethod:

      This method extracts information from nf-core/rnaseq's output
      :param res_inpath: Path to rna-seq results folder
      :return: returns list of DataFrames containing information from StringTie


   .. method:: create_gene_table(ensembl_df, hgnc_df, expression_df, db_dest)
      :staticmethod:

      This method creates the gene_table csv files
      :param ensembl_df: Ensembl DataFrame
      :param hgnc_df: HUGO DataFrame
      :param expression_df: Expression DataFrame
      :param db_dest: Path to directory, where cdv files should be saved
      :return:


   .. method:: create_expression_table(expression_df, raw_count_df, db_dest)
      :staticmethod:

      This method creates the expression csv fil
      :param expression_df: expression DataFrame
      :param raw_count_df: raw_count DataFrame from featureCounts
      :param db_dest: Path to directory, where cdv files should be saved
      :return:


   .. method:: create_project_layer_tables(sra_meta_df, icgc_meta_df, gdc_meta_df, db_dest)
      :staticmethod:

      This method creates tables for ProjectLayer
      :param sra_meta_df: Metadata DataFrame from SRA
      :param icgc_meta_df: Metadata DataFrame from ICGC DCC
      :param gdc_meta_df: Metadata DataFrame from GDC
      :param db_dest: Path to directory, where cdv files should be saved
      :return:


   .. method:: create_countinfo_raw_count_table(df, rnaseq, db_dest)
      :staticmethod:

      This method creates the countinfo table
      :param df: DataFrame containing some f the countinfo information
      :param rnaseq: Path to reuslts of nf-core/rnaseq
      :param db_dest: Path do directory where files for database should be stored
      :return:


   .. method:: create_pipeline_table(rnaseq, db_dest)
      :staticmethod:

      This method creates the pipeline table for the database
      :param rnaseq: Path to reuslts of nf-core/rnaseq
      :param db_dest: Path do directory where files for database should be stored
      :return: None



.. py:class:: ListDict

   .. attribute:: base_path
      

      

   .. attribute:: current_dir
      

      


.. py:class:: SQLscripts

   .. method:: prepare_populate_script(db_dest)
      :staticmethod:

      This method creates a populate.sql script based on the given input of db_dest
      :param db_dest: Path do directory where files for database are stored
      :return: None



